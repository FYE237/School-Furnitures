{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isHovered\", \"isFocused\"],\n    _excluded2 = [\"InputLeftElement\", \"InputRightElement\", \"leftElement\", \"rightElement\", \"onFocus\", \"onBlur\", \"wrapperRef\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../Box\";\nimport InputBase from \"./InputBase\";\nimport { useFormControl } from \"../../composites/FormControl\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { extractInObject, stylingProps } from \"../../../theme/tools/utils\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { mergeRefs } from \"../../../utils\";\n\nvar Input = function Input(_ref2, ref) {\n  var isHoveredProp = _ref2.isHovered,\n      isFocusedProp = _ref2.isFocused,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var inputProps = useFormControl({\n    isDisabled: props.isDisabled,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    nativeID: props.nativeID\n  });\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isFocused = _React$useState2[0],\n      setIsFocused = _React$useState2[1];\n\n  var handleFocus = function handleFocus(focusState, callback) {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  var _ref = React.useRef(null);\n\n  var _useHover = useHover({}, _ref),\n      isHovered = _useHover.isHovered;\n\n  var inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required\n  };\n\n  var _usePropsResolution = usePropsResolution('Input', _objectSpread(_objectSpread({}, inputThemeProps), props), {\n    isDisabled: inputThemeProps.isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isInvalid: inputThemeProps.isInvalid,\n    isReadOnly: inputThemeProps.isReadOnly\n  }),\n      InputLeftElement = _usePropsResolution.InputLeftElement,\n      InputRightElement = _usePropsResolution.InputRightElement,\n      leftElement = _usePropsResolution.leftElement,\n      rightElement = _usePropsResolution.rightElement,\n      _onFocus = _usePropsResolution.onFocus,\n      _onBlur = _usePropsResolution.onBlur,\n      wrapperRef = _usePropsResolution.wrapperRef,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var _extractInObject = extractInObject(resolvedProps, [].concat(_toConsumableArray(stylingProps.margin), _toConsumableArray(stylingProps.border), _toConsumableArray(stylingProps.layout), _toConsumableArray(stylingProps.flexbox), _toConsumableArray(stylingProps.position), _toConsumableArray(stylingProps.background), ['shadow', 'opacity'])),\n      _extractInObject2 = _slicedToArray(_extractInObject, 2),\n      layoutProps = _extractInObject2[0],\n      nonLayoutProps = _extractInObject2[1];\n\n  var _extractInObject3 = extractInObject(nonLayoutProps, ['variant']),\n      _extractInObject4 = _slicedToArray(_extractInObject3, 2),\n      baseInputProps = _extractInObject4[1];\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (InputLeftElement || InputRightElement || leftElement || rightElement) {\n    return React.createElement(Box, _extends({\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      overflow: \"hidden\"\n    }, layoutProps, {\n      ref: mergeRefs([_ref, wrapperRef])\n    }), InputLeftElement || leftElement ? InputLeftElement || leftElement : null, React.createElement(InputBase, _extends({\n      InputLeftElement: InputLeftElement,\n      InputRightElement: InputRightElement,\n      leftElement: leftElement,\n      rightElement: rightElement,\n      inputProps: inputProps,\n      bg: \"transparent\"\n    }, baseInputProps, {\n      flex: 1,\n      disableFocusHandling: true,\n      ref: ref,\n      variant: \"unstyled\",\n      onFocus: function onFocus(e) {\n        handleFocus(true, _onFocus ? function () {\n          return _onFocus(e);\n        } : function () {});\n      },\n      onBlur: function onBlur(e) {\n        handleFocus(false, _onBlur ? function () {\n          return _onBlur(e);\n        } : function () {});\n      }\n    })), InputRightElement || rightElement ? InputRightElement || rightElement : null);\n  } else {\n    return React.createElement(InputBase, _extends({\n      inputProps: inputProps,\n      isHovered: isHoveredProp,\n      isFocused: isFocusedProp\n    }, props, {\n      ref: ref,\n      onFocus: function onFocus(e) {\n        handleFocus(true, _onFocus ? function () {\n          return _onFocus(e);\n        } : function () {});\n      },\n      onBlur: function onBlur(e) {\n        handleFocus(false, _onBlur ? function () {\n          return _onBlur(e);\n        } : function () {});\n      }\n    }));\n  }\n};\n\nexport default memo(forwardRef(Input));","map":{"version":3,"sources":["Input.tsx"],"names":["Input","isHovered","isFocused","props","inputProps","useFormControl","isDisabled","isInvalid","isReadOnly","isRequired","nativeID","React","handleFocus","setIsFocused","callback","_ref","useHover","inputThemeProps","required","resolvedProps","usePropsResolution","isHoveredProp","isFocusedProp","extractInObject","stylingProps","useHasResponsiveProps","InputLeftElement","mergeRefs","e","onFocus","onBlur","InputRightElement","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,GAAA;AAEA,OAAA,SAAA;AACA,SAAA,cAAA;AACA,SAAA,qBAAA;AACA,SAAA,QAAA,QAAA,iCAAA;AACA,SAAA,eAAA,EAAA,YAAA;AACA,SAAA,kBAAA;AACA,SAAA,SAAA;;AAEA,IAAMA,KAAK,GAAG,SAARA,KAAQ,QAAA,GAAA,EAGT;AAAA,MAFH,aAEG,SAFDC,SAEC;AAAA,MAFH,aAEG,SAFyBC,SAEzB;AAAA,MAFsDC,KAEtD;;AACH,MAAMC,UAAU,GAAGC,cAAc,CAAC;AAChCC,IAAAA,UAAU,EAAEH,KAAK,CADe,UAAA;AAEhCI,IAAAA,SAAS,EAAEJ,KAAK,CAFgB,SAAA;AAGhCK,IAAAA,UAAU,EAAEL,KAAK,CAHe,UAAA;AAIhCM,IAAAA,UAAU,EAAEN,KAAK,CAJe,UAAA;AAKhCO,IAAAA,QAAQ,EAAEP,KAAK,CAACO;AALgB,GAAD,CAAjC;;AAOA,wBAAkCC,KAAK,CAALA,QAAAA,CAAlC,KAAkCA,CAAlC;AAAA;AAAA,MAAM,SAAN;AAAA,MAAM,YAAN;;AACA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAAA,UAAA,EAAA,QAAA,EAAwC;AAC1DC,IAAAA,YAAY,CAAZA,UAAY,CAAZA;AACAC,IAAAA,QAAQ;AAFV,GAAA;;AAKA,MAAMC,IAAI,GAAGJ,KAAK,CAALA,MAAAA,CAAb,IAAaA,CAAb;;AACA,kBAAsBK,QAAQ,CAAA,EAAA,EAA9B,IAA8B,CAA9B;AAAA,MAAQf,SAAR,aAAQA,SAAR;;AAEA,MAAMgB,eAAe,GAAG;AACtBX,IAAAA,UAAU,EAAEF,UAAU,CADA,QAAA;AAEtBG,IAAAA,SAAS,EAAEH,UAAU,CAFC,oBAAA;AAGtBI,IAAAA,UAAU,EAAEJ,UAAU,CAHA,qBAAA;AAItBK,IAAAA,UAAU,EAAEL,UAAU,CAACc;AAJD,GAAxB;;AAOA,4BASIE,kBAAkB,CAAA,OAAA,kCAEpB,eAFoB,GAIfjB,KAJe,GAMpB;AACEG,IAAAA,UAAU,EAAEW,eAAe,CAD7B,UAAA;AAEEhB,IAAAA,SAAS,EAAEoB,aAAa,IAF1B,SAAA;AAGEnB,IAAAA,SAAS,EAAEoB,aAAa,IAH1B,SAAA;AAIEf,IAAAA,SAAS,EAAEU,eAAe,CAJ5B,SAAA;AAKET,IAAAA,UAAU,EAAES,eAAe,CAACT;AAL9B,GANoB,CATtB;AAAA,MAAM,gBAAN,uBAAM,gBAAN;AAAA,MAAM,iBAAN,uBAAM,iBAAN;AAAA,MAAM,WAAN,uBAAM,WAAN;AAAA,MAAM,YAAN,uBAAM,YAAN;AAAA,MAAM,QAAN,uBAAM,OAAN;AAAA,MAAM,OAAN,uBAAM,MAAN;AAAA,MAAM,UAAN,uBAAM,UAAN;AAAA,MAQKW,aARL;;AAwBA,yBAAsCI,eAAe,CAAA,aAAA,+BAChDC,YAAY,CADoD,MAAhB,sBAEhDA,YAAY,CAFoD,MAAhB,sBAGhDA,YAAY,CAHoD,MAAhB,sBAIhDA,YAAY,CAJoD,OAAhB,sBAKhDA,YAAY,CALoD,QAAhB,sBAMhDA,YAAY,CANoD,UAAhB,IAAgB,QAAhB,EAArD,SAAqD,GAArD;AAAA;AAAA,MAAM,WAAN;AAAA,MAAM,cAAN;;AAWA,0BAA2BD,eAAe,CAAA,cAAA,EAAiB,CA3DxD,SA2DwD,CAAjB,CAA1C;AAAA;AAAA,MAAM,cAAN;;AAGA,MAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AACD,MAAIC,gBAAgB,IAAhBA,iBAAAA,IAAAA,WAAAA,IAAJ,YAAA,EAA0E;AACxE,WACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;AACE,MAAA,OAAO,EADT,MAAA;AAEE,MAAA,aAAa,EAFf,KAAA;AAGE,MAAA,UAAU,EAHZ,QAAA;AAIE,MAAA,cAAc,EAJhB,eAAA;AAKE,MAAA,QAAQ,EAAC;AALX,KAAA,EAAA,WAAA,EAAA;AAOE,MAAA,GAAG,EAAEC,SAAS,CAAC,CAAA,IAAA,EAAD,UAAC,CAAD;AAPhB,KAAA,CAAA,EASGD,gBAAgB,IAAhBA,WAAAA,GACGA,gBAAgB,IADnBA,WAAAA,GATH,IAAA,EAYE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AACE,MAAA,gBAAgB,EADlB,gBAAA;AAEE,MAAA,iBAAiB,EAFnB,iBAAA;AAGE,MAAA,WAAW,EAHb,WAAA;AAIE,MAAA,YAAY,EAJd,YAAA;AAKE,MAAA,UAAU,EALZ,UAAA;AAME,MAAA,EAAE,EAAC;AANL,KAAA,EAAA,cAAA,EAAA;AAQE,MAAA,IAAI,EARN,CAAA;AASE,MAAA,oBAAoB,EATtB,IAAA;AAUE,MAAA,GAAG,EAVL,GAAA;AAWE,MAAA,OAAO,EAXT,UAAA;AAYE,MAAA,OAAO,EAAGE,iBAAAA,CAAD,EAAO;AACdhB,QAAAA,WAAW,CAAA,IAAA,EAAOiB,QAAO,GAAG;AAAA,iBAAMA,QAAO,CAAhB,CAAgB,CAAb;AAAA,SAAH,GAAsB,YAAM,CAArDjB,CAAW,CAAXA;AAbJ,OAAA;AAeE,MAAA,MAAM,EAAGgB,gBAAAA,CAAD,EAAO;AACbhB,QAAAA,WAAW,CAAA,KAAA,EAAQkB,OAAM,GAAG;AAAA,iBAAMA,OAAM,CAAf,CAAe,CAAZ;AAAA,SAAH,GAAqB,YAAM,CAApDlB,CAAW,CAAXA;AACD;AAjBH,KAAA,CAAA,CAZF,EA+BGmB,iBAAiB,IAAjBA,YAAAA,GACGA,iBAAiB,IADpBA,YAAAA,GAhCL,IACE,CADF;AADF,GAAA,MAsCO;AACL,WACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AACE,MAAA,UAAU,EADZ,UAAA;AAEE,MAAA,SAAS,EAFX,aAAA;AAGE,MAAA,SAAS,EAAET;AAHb,KAAA,EAAA,KAAA,EAAA;AAKE,MAAA,GAAG,EALL,GAAA;AAME,MAAA,OAAO,EAAGM,iBAAAA,CAAD,EAAO;AACdhB,QAAAA,WAAW,CAAA,IAAA,EAAOiB,QAAO,GAAG;AAAA,iBAAMA,QAAO,CAAhB,CAAgB,CAAb;AAAA,SAAH,GAAsB,YAAM,CAArDjB,CAAW,CAAXA;AAPJ,OAAA;AASE,MAAA,MAAM,EAAGgB,gBAAAA,CAAD,EAAO;AACbhB,QAAAA,WAAW,CAAA,KAAA,EAAQkB,OAAM,GAAG;AAAA,iBAAMA,OAAM,CAAf,CAAe,CAAZ;AAAA,SAAH,GAAqB,YAAM,CAApDlB,CAAW,CAAXA;AACD;AAXH,KAAA,CAAA,CADF;AAeD;AA1HH,CAAA;;AA6HA,eAAeoB,IAAI,CAACC,UAAU,CAA9B,KAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport type { IInputProps } from './types';\nimport InputBase from './InputBase';\nimport { useFormControl } from '../../composites/FormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { mergeRefs } from '../../../utils';\n\nconst Input = (\n  { isHovered: isHoveredProp, isFocused: isFocusedProp, ...props }: IInputProps,\n  ref: any\n) => {\n  const inputProps = useFormControl({\n    isDisabled: props.isDisabled,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    nativeID: props.nativeID,\n  });\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  const {\n    InputLeftElement,\n    InputRightElement,\n    leftElement,\n    rightElement,\n    onFocus,\n    onBlur,\n    wrapperRef,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Input',\n    {\n      ...inputThemeProps,\n      ...props,\n    },\n    {\n      isDisabled: inputThemeProps.isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isInvalid: inputThemeProps.isInvalid,\n      isReadOnly: inputThemeProps.isReadOnly,\n    }\n  );\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.border,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    ...stylingProps.background,\n    'shadow',\n    'opacity',\n  ]);\n\n  const [, baseInputProps] = extractInObject(nonLayoutProps, ['variant']);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (InputLeftElement || InputRightElement || leftElement || rightElement) {\n    return (\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n        overflow=\"hidden\"\n        {...layoutProps}\n        ref={mergeRefs([_ref, wrapperRef])}\n      >\n        {InputLeftElement || leftElement\n          ? InputLeftElement || leftElement\n          : null}\n        <InputBase\n          InputLeftElement={InputLeftElement}\n          InputRightElement={InputRightElement}\n          leftElement={leftElement}\n          rightElement={rightElement}\n          inputProps={inputProps}\n          bg=\"transparent\"\n          {...baseInputProps}\n          flex={1}\n          disableFocusHandling\n          ref={ref}\n          variant=\"unstyled\"\n          onFocus={(e) => {\n            handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n          }}\n          onBlur={(e) => {\n            handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n          }}\n        />\n        {InputRightElement || rightElement\n          ? InputRightElement || rightElement\n          : null}\n      </Box>\n    );\n  } else {\n    return (\n      <InputBase\n        inputProps={inputProps}\n        isHovered={isHoveredProp}\n        isFocused={isFocusedProp}\n        {...props}\n        ref={ref}\n        onFocus={(e) => {\n          handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n        }}\n        onBlur={(e) => {\n          handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n        }}\n      />\n    );\n  }\n};\n\nexport default memo(forwardRef(Input));\n"]},"metadata":{},"sourceType":"module"}